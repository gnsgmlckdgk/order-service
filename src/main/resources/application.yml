server:
  port: 9002  # 서버가 연결을 받아들이는 포트
  shutdown: graceful  # 우아한 종료를 활성화
  netty:
    connection-timeout: 2s  # 서버와 TCP 연결을 수립하기 위해 기다리는 시간
    idle-timeout: 15s # 데이터가 전송되지 않는 경우 TCP 연결을 닫기 전에 기다리는 시간

spring:
  application:
    name: order-service
  lifecycle:
    timeout-per-shutdown-phase: 15s # 15초 간의 우아한 종료 기간을 정의
  r2dbc:
    username: user
    password: password
    url: r2dbc:postgresql://localhost:5432/polardb_order
    pool:
      max-create-connection-time: 2s  # 풀에서 연결 객체 하나를 얻을 때까지 기다릴 수 있는 최대한의 시간
      initial-size: 5 # 연결 풀의 초기 크기
      max-size: 10  # 풀이 최대한으로 가질 수 있는 연결의 수
  flyway:
    user: ${spring.r2dbc.username}
    password: ${spring.r2dbc.password}
    url: jdbc:postgresql://localhost:5432/polardb_order

  # 컨피스 서버 설정 ------------------------------------------------------------------------------
  config:
    import: "optional:configserver:"  # 가능하면 컨피그 서버에서 설정 데이터를 가져온다.
  cloud:
    config:
      uri: http://localhost:8888  # 설정 서버의 URL
      request-connect-timeout: 30000 # 30s, 설정 서버에 연결될 때까지 기다리는 시간(밀리초)
      request-read-timeout: 30000  # 30s, 설정 서버에서 설정 데이터를 읽을 때까지 기다리는 시간(밀리초)
      fail-fast: true # 설정 서버 연결 실패를 치명적 오류로 인식[true 여야지 재시도가 작동한다.]
      retry:
        max-attempts: 10 # 시도의 최대 횟수
        initial-interval: 1000  # 최초 재시도 지연시간(밀리초)
        max-interval: 5000  # 재시도 지연 최대 시간(밀리초)
        multiplier: 1.1 # 지연 시간 계산 승수

# 컨피그 서버 설정 ---------------------------------------------------------------------------
management:
  endpoints:
    web:
      exposure:
        include: refresh  # HTTP를 통해 /actuator/refresh 엔드포인트를 노출한다.[ 컨피그 서버 설정 가져와 새로 적용 ]

polar:
  catalog-service-uri: "http://catalog-service"
  greeting: Welcome to the local book order!

logging:
  level:
    org.springframework.cloud: DEBUG
    org.springframework.boot.context.config: DEBUG
    org.springframework.web.reactive: DEBUG  # reactive 스택 관련 로그